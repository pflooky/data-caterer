rootLogger.level = ${env:LOG_LEVEL:-info}
rootLogger.appenderRef.stdout.ref = console

appender.console.type = Console
appender.console.name = console
appender.console.target = SYSTEM_OUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{dd/MM/yyyy HH:mm:ss} [%-5p] %c: %m%n%ex

# Settings to quiet third party logs that are too verbose
logger.spark.name = org.apache.spark
logger.spark.level = warn
logger.jetty.name = org.sparkproject.jetty
logger.jetty.level = warn
logger.jetty2.name = org.sparkproject.jetty.util.component.AbstractLifeCycle
logger.jetty2.level = error
logger.repl1.name = org.apache.spark.repl.SparkIMain$exprTyper
logger.repl1.level = info
logger.repl2.name = org.apache.spark.repl.SparkILoop$SparkILoopInterpreter
logger.repl2.level = info

# Set the default spark-shell log level to WARN. When running the spark-shell, the
# log level for this class is used to overwrite the root logger's log level, so that
# the user can have different defaults for the shell and regular Spark apps.
logger.repl.name = org.apache.spark.repl.Main
logger.repl.level = warn

# SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs
# in SparkSQL with Hive support
logger.hadoop.name = org.apache.hadoop
logger.hadoop.level = warn
logger.metastore.name = org.apache.hadoop.hive.metastore.RetryingHMSHandler
logger.metastore.level = fatal
logger.hive_functionregistry.name = org.apache.hadoop.hive.ql.exec.FunctionRegistry
logger.hive_functionregistry.level = error

# Parquet
logger.parquet.name = org.apache.parquet
logger.parquet.level = warn
logger.parquet1.name = org.apache.parquet.CorruptStatistics
logger.parquet1.level = error
logger.parquet2.name = parquet.CorruptStatistics
logger.parquet2.level = error

# Datastax
logger.dse.name = com.datastax.oss.driver
logger.dse.level = warn

# Solace
logger.solace.name = com.solacesystems.jcsmp
logger.solace.level = warn

# Kafka
logger.kafka.name = org.apache.kafka
logger.kafka.level = warn
